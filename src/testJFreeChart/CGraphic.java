package testJFreeChart;

/*
 * CGraphic.java
 *
 * Created on 20 mai 2004, 12:44
 *
 *    Copyright 2004 Laboratoire SABRES, Université de Bretagne Sud
    

    This file is part of Fiabilitis.

    Fiabilitis is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    Fiabilitis is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Fiabilitis; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

 */



import java.awt.*;
import java.awt.Color;
import java.awt.datatransfer.*;
import java.awt.image.BufferedImage;
import com.keypoint.PngEncoder;

import javafx.scene.chart.NumberAxis;

import org.jfree.chart.plot.*;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.jfree.ui.RefineryUtilities;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;


import javax.swing.JPopupMenu;
import javax.swing.JMenuItem;

import java.awt.event.*;

/**
 * La classe CGraphic permet de creer la fenetre comprenant une zone de graphique avec une zone de commentaires
 * @author Guiguen Anthony
 */
public class CGraphic extends javax.swing.JInternalFrame {
    private XYDataset DataSet;
    private String Title = "TEST Abder";
    private XYLineAndShapeRenderer Renderer;
    private JFreeChart Chart;
    
    /**
     * Creates new form CGraphic
     * @param frameTitle Titre de la frame de la fenetre appelante.
     * @param title Titre affiché dans le graphique (ex: Weibull test)
     * @param dataSet Set contenant les courbes à afficher (package jFreeChart)
     * @param renderer Donne le type de chaque courbe (nuage de point, courbe sans affichage des points...)
     */
    public CGraphic(String frameTitle, String title, XYDataset dataSet, XYLineAndShapeRenderer renderer) {
        super();
        this.DataSet = dataSet;
        this.Title = title;
        this.Renderer = renderer;
        
        // Configure log4j afin de n'avoir aucune indication de debug
 
        initComponents();
        initPopupButton();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {
        
        setClosable(true);
        setMaximizable(true);
        setResizable(true);
        setIconifiable(true);
        setPreferredSize(new java.awt.Dimension(600, 500));
        
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
      
        jPanel6 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
     
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();

        
        this.Chart = createChart();
        jGraph = new ChartPanel(this.Chart);
        
      
        jGraph.setBorder(new javax.swing.border.EtchedBorder());
        jGraph.setLayout(getLayout());
        getContentPane().add(jGraph, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.BorderLayout());


        jPanel2.setBorder(new javax.swing.border.EtchedBorder());
        jPanel2.setPreferredSize(new java.awt.Dimension(0, 120));

        jPanel6.setLayout(new java.awt.BorderLayout());
        


        jPanel6.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel2.add(jPanel6, java.awt.BorderLayout.CENTER);
        
        jPanel3.setLayout(new java.awt.BorderLayout());

        jLabel1.setText("  Result :");
        jPanel3.add(jLabel1, java.awt.BorderLayout.CENTER);

        jPanel4.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 0));

       

        

        jPanel3.add(jPanel4, java.awt.BorderLayout.EAST);

        jPanel2.add(jPanel3, java.awt.BorderLayout.NORTH);

        getContentPane().add(jPanel2, java.awt.BorderLayout.SOUTH);

        pack();


    }

    /**
     * Permet d'initialiser le menu pop-up qui sera afficher lors d'un click sur
     * le label "menu".
     */    
    public void initPopupButton() {
        
        JMenuItem saveMenuItem = new JMenuItem("Save image...");
        saveMenuItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                try {
                    jGraph.doSaveAs();
                } catch (java.io.IOException e1) {}
            }
        });
        
        
                
        JMenuItem printMenuItem = new JMenuItem("Print image...");
        printMenuItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                jGraph.createChartPrintJob();
            }
        });
        
        
        
        
      
    }

    
    /**
     * Permet de definir le label de l'exe des x sur le graphique
     * @param xLabel Label que l'on souhaite mettre
     */    
    public void setXLabel(String xLabel) {
        XYPlot plot = (XYPlot)this.Chart.getPlot();
      
 
    }


    /**
     * Permet de definir le label de l'axe des y sur le graphique
     * @param yLabel Label en Y
     */    
    public void setYLabel(String yLabel) {
        XYPlot plot = (XYPlot)this.Chart.getPlot();
      
        
    }
    
    /**
     * Permet de definir ce que l'on va mettre dans la zone texte de
     * commentaire
     * @param result Message
     */    
   
    
    /**
     * Cette methode permet de recuperer le resultat affiché dans la zone de result.
     * @return Retourne le resultat de la zone de texte.
     */    
    
    
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            this.jGraph.doSaveAs();
        } catch (java.io.IOException e) {
            e.printStackTrace();
        }
    }
    
    /**
     * Creates a chart.
     * @param dataset  the data for the chart.
     * @return a chart.
     */
    private JFreeChart createChart() {
        
        // create the chart...
        JFreeChart chart = ChartFactory.createXYLineChart(
            Title,                    // chart title
            "X",                      // x axis label
            "Y",                      // y axis label
            DataSet,                  // data
            PlotOrientation.VERTICAL,
            true,                     // include legend
            true,                     // tooltips
            false                     // urls
        );

        // NOW DO SOME OPTIONAL CUSTOMISATION OF THE CHART...
        chart.setBackgroundPaint(Color.white);

        
        
        
        // get a reference to the plot for further customisation...
        XYPlot plot = chart.getXYPlot();
        plot.setBackgroundPaint(Color.lightGray);
      
        plot.setDomainGridlinePaint(Color.white);
        plot.setRangeGridlinePaint(Color.white);
        
        plot.setRenderer(Renderer);

        // change the auto tick unit selection to integer units only...
        
                
        return chart;
        
    }
    
    /**
     * Creates a sample dataset.
     * @return a sample dataset.
     */
    static public XYDataset createSampleDataset() {
        
        XYSeries series1 = new XYSeries("Abder");
        series1.add(1.0, 1.0);
        series1.add(2.0, 4.0);
        series1.add(3.0, 3.0);
        series1.add(4.0, 5.0);
        series1.add(5.0, 5.0);
        series1.add(6.0, 7.0);
        series1.add(7.0, 7.0);
        series1.add(8.0, 8.0);

        XYSeries series2 = new XYSeries("Second");
        series2.add(1.0, 5.0);
        series2.add(2.0, 7.0);
        series2.add(3.0, 6.0);
        series2.add(4.0, 8.0);
        series2.add(5.0, 4.0);
        series2.add(6.0, 4.0);
        series2.add(7.0, 2.0);
        series2.add(8.0, 1.0);

        XYSeries series3 = new XYSeries("Third");
        series3.add(3.0, 4.0);
        series3.add(4.0, 3.0);
        series3.add(5.0, 2.0);
        series3.add(6.0, 3.0);
        series3.add(7.0, 6.0);
        series3.add(8.0, 3.0);
        series3.add(9.0, 4.0);
        series3.add(10.0, 3.0);

        XYSeriesCollection dataset = new XYSeriesCollection();
        dataset.addSeries(series1);
        dataset.addSeries(series2);
        dataset.addSeries(series3);
                
        return dataset;
        
    }
        
    
    // Variables declaration - do not modify
   
    private ChartPanel jGraph;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
  
    // End of variables declaration
    public static void main(final String[] args) {

        final LineChartDemo demo = new LineChartDemo("Line Chart Demo 6");
        demo.pack();
        RefineryUtilities.centerFrameOnScreen(demo);
        demo.setVisible(true);

    } 
}
